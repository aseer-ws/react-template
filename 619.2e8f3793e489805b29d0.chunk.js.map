{"version":3,"sources":["webpack://react-template/./app/utils/index.js","webpack://react-template/./app/utils/apiUtils.js"],"names":["mapKeysDeep","obj","fn","Array","isArray","map","val","Object","keys","reduce","acc","current","key","apiClients","github","itunes","default","generateApiClient","type","createApiClientWithTransForm","process","baseURL","api","create","headers","addResponseTransform","response","ok","data","camelCase","addRequestTransform","request","snakeCase"],"mappings":"2bAYO,IAaMA,EAAc,SAAdA,EAAeC,EAAKC,GAAN,OACzBC,MAAMC,QAAQH,GACVA,EAAII,KAAI,SAACC,GAAD,OAASN,EAAYM,EAAKJ,MACnB,WAAf,EAAOD,GACPM,OAAOC,KAAKP,GAAKQ,QAAO,SAACC,EAAKC,GAC5B,IAAMC,EAAMV,EAAGS,GACTL,EAAML,EAAIU,GAEhB,OADAD,EAAIE,GAAe,OAARN,GAA+B,WAAf,EAAOA,GAAmBN,EAAYM,EAAKJ,GAAMI,EACrEI,IACN,IACHT,GC9BAY,EAAa,CACjBC,OAAQ,KACRC,OAAQ,KACRC,QAAS,MAGEC,EAAoB,WAAqB,IAApBC,EAAoB,uDAAb,SACvC,OAAQA,GACN,IAAK,SAEH,OADAL,EAAWK,GAAQC,EAA6BC,2BACzCP,EAAWK,GACpB,IAAK,SAEH,OADAL,EAAWK,GAAQC,EAA6BC,6BACzCP,EAAWK,GACpB,QAEE,OADAL,EAAWG,QAAUG,EAA6BC,2BAC3CP,EAAWG,UAIXG,EAA+B,SAACE,GAC3C,IAAMC,GAAMC,QAAO,CACjBF,UACAG,QAAS,CAAE,eAAgB,sBAiB7B,OAfAF,EAAIG,sBAAqB,SAACC,GACxB,IAAQC,EAAaD,EAAbC,GAAIC,EAASF,EAATE,KAIZ,OAHID,GAAMC,IACRF,EAASE,KAAO5B,EAAY4B,GAAM,SAACpB,GAAD,OAAUqB,IAAUrB,OAEjDkB,KAGTJ,EAAIQ,qBAAoB,SAACC,GACvB,IAAQH,EAASG,EAATH,KAIR,OAHIA,IACFG,EAAQH,KAAO5B,EAAY4B,GAAM,SAACpB,GAAD,OAAUwB,IAAUxB,OAEhDuB,KAEFT","file":"619.2e8f3793e489805b29d0.chunk.js","sourcesContent":["import find from 'lodash/find';\nimport get from 'lodash/get';\nimport routeConstants from './routeConstants';\n\n/**\n * Get details of the current route from the route config.\n * If location.pathname doesn't match any entry in the routeConstants it will return null\n * @author mac\n * @date 2020-05-07\n * @param {any} location\n * @returns {any}\n */\nexport const getCurrentRouteDetails = (location) => {\n  if (!get(location, 'pathname')) {\n    return null;\n  }\n  const route = find(\n    Object.keys(routeConstants),\n    (key) => routeConstants[key].route === location.pathname || `${routeConstants[key].route}/` === location.pathname\n  );\n  if (route) {\n    return routeConstants[route];\n  }\n  return null;\n};\nexport const mapKeysDeep = (obj, fn) =>\n  Array.isArray(obj)\n    ? obj.map((val) => mapKeysDeep(val, fn))\n    : typeof obj === 'object'\n    ? Object.keys(obj).reduce((acc, current) => {\n        const key = fn(current);\n        const val = obj[current];\n        acc[key] = val !== null && typeof val === 'object' ? mapKeysDeep(val, fn) : val;\n        return acc;\n      }, {})\n    : obj;\n\nexport const isLocal = () => {\n  try {\n    const local = JSON.parse(process.env.IS_LOCAL);\n    return typeof local === 'boolean' && local;\n  } catch {\n    // continue regardless of error\n  }\n  return false;\n};\n","import { create } from 'apisauce';\nimport snakeCase from 'lodash/snakeCase';\nimport camelCase from 'lodash/camelCase';\nimport { mapKeysDeep } from './index';\n\nconst apiClients = {\n  github: null,\n  itunes: null,\n  default: null\n};\nexport const getApiClient = (type = 'github') => apiClients[type];\nexport const generateApiClient = (type = 'github') => {\n  switch (type) {\n    case 'github':\n      apiClients[type] = createApiClientWithTransForm(process.env.GITHUB_URL);\n      return apiClients[type];\n    case 'itunes':\n      apiClients[type] = createApiClientWithTransForm(process.env.ITUNES_URL);\n      return apiClients[type];\n    default:\n      apiClients.default = createApiClientWithTransForm(process.env.GITHUB_URL);\n      return apiClients.default;\n  }\n};\n\nexport const createApiClientWithTransForm = (baseURL) => {\n  const api = create({\n    baseURL,\n    headers: { 'Content-Type': 'application/json' }\n  });\n  api.addResponseTransform((response) => {\n    const { ok, data } = response;\n    if (ok && data) {\n      response.data = mapKeysDeep(data, (keys) => camelCase(keys));\n    }\n    return response;\n  });\n\n  api.addRequestTransform((request) => {\n    const { data } = request;\n    if (data) {\n      request.data = mapKeysDeep(data, (keys) => snakeCase(keys));\n    }\n    return request;\n  });\n  return api;\n};\n"],"sourceRoot":""}