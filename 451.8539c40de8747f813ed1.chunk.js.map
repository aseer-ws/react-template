{"version":3,"sources":["webpack://react-template/./app/components/TrackCard/index.js","webpack://react-template/./app/containers/TrackGridContainer/index.js","webpack://react-template/./app/services/tunesApi.js","webpack://react-template/./app/containers/TrackProvider/saga.js","webpack://react-template/./app/containers/TrackProvider/selectors.js"],"names":["imageAnimationStyle","css","StyledTrackItem","styled","StyledTrackCard","media","StyledImageContainer","StyledImage","props","animate","PlayPauseButton","TrackInfoContainer","StyledLink","Link","TrackName","T","colors","success","TrackCollectionName","TrackPrice","error","TrackGenre","StyledAudio","TrackCard","trackId","trackName","collectionName","artworkUrl100","trackPrice","primaryGenreName","previewUrl","onTrackToggle","audioRef","useRef","useState","playing","setPlaying","togglePlay","p","id","data-testid","width","height","preview","src","fallback","If","condition","title","type","onClick","current","pause","play","shape","icon","PauseCircleFilled","PlayCircleFilled","preload","ref","onPause","ended","to","otherwise","noOfLines","marginBottom","text","String","status","defaultProps","Search","CustomCard","margintop","Container","maxWidth","padding","StyledArtistSearch","StyledHeader","StyledTracksContainer","requestGetTracks","trackProviderCreators","clearTracks","CORS_ERROR_MESSAGE","TrackGridContainer","artist","tracks","trackCount","tracksError","dispatchGetTracks","dispatchClearTracks","loading","setLoading","currentTrackRef","trackRef","paused","useEffect","notification","message","description","placement","duration","handleDebouncedSearch","artistName","Helmet","name","content","placeholder","allowClear","defaultValue","onChange","evt","target","value","onSearch","term","active","values","For","ParentComponent","of","Object","renderItem","item","key","skeletonLoading","JSON","stringify","mapStateToProps","createStructuredSelector","selectArtist","selectTracks","selectTrackCount","selectTracksError","mapDispatchToProps","dispatch","withConnect","connect","compose","memo","injectIntl","injectSaga","saga","trackProviderSaga","TrackGridContainerTest","tunesApi","generateApiClient","getTunes","get","getArtistTracks","getCurrentTrack","successGetTracks","failureGetTracks","successGetTrack","failureGetTrack","action","call","response","ok","data","problem","put","CURRENT_TRACK_FROM_TRACKS_SELECTOR","selectCurrentTrackFromTracks","select","trackFromTrackList","res","results","takeLatest","trackProviderTypes","selectTrackProviderDomain","state","trackProvider","initialState","createSelector","substate","list","selectTrack","details","track","selectTrackError","tracksSelector","trackIdSelector","trackList"],"mappings":"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","file":"451.8539c40de8747f813ed1.chunk.js","sourcesContent":["import { PauseCircleFilled, PlayCircleFilled } from '@ant-design/icons';\nimport { media } from '@app/themes';\nimport * as colors from '@app/themes/colors';\nimport { Badge, Button, Card, Image } from 'antd';\nimport { isEmpty } from 'lodash';\nimport PropTypes from 'prop-types';\n/* eslint-disable-next-line */\nimport React, { MutableRefObject, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled, { css } from 'styled-components';\nimport If from '../If';\nimport { T } from '../T';\n\nexport const imageAnimationStyle = css`\n  animation-play-state: running;\n`;\n\nconst StyledTrackItem = styled.article`\n  height: 100%;\n`;\n\nconst StyledTrackCard = styled(Card)`\n  && {\n    &.ant-card {\n      height: 100%;\n    }\n    .ant-card-body {\n      height: 100%;\n      display: flex;\n\n      &:hover {\n        box-shadow: 0 0 10px 1px lightgray;\n      }\n      ${media.lessThan('mobile')`\n        flex-direction: column;\n        align-items: center;\n      `}\n    }\n  }\n`;\n\nconst StyledImageContainer = styled.div`\n  display: flex;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 6.5rem;\n  height: 6.5rem;\n  flex: 0 0 6.5rem;\n  margin-right: 1rem;\n\n  .ant-image {\n    width: 100%;\n    height: 100%;\n  }\n\n  ${media.lessThan('mobile')`\n    margin-right: 0;\n    margin-bottom: 1rem;\n  `}\n`;\n\nconst StyledImage = styled(Image)`\n  height: 100%;\n  width: 100%;\n  border-radius: 50%;\n  overflow: hidden;\n  object-fit: cover;\n  animation: spin infinite 3s linear;\n  animation-play-state: paused;\n  ${(props) => props.animate === 'true' && imageAnimationStyle}\n\n  @keyframes spin {\n    0% {\n      transform: rotateZ(0deg);\n    }\n    50% {\n      transform: rotateZ(180deg);\n    }\n    100% {\n      transform: rotateZ(360deg);\n    }\n  }\n`;\n\nconst PlayPauseButton = styled(Button)`\n  && {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n`;\n\nconst TrackInfoContainer = styled.div`\n  color: inherit;\n  flex: 1;\n  cursor: pointer;\n`;\n\nconst StyledLink = styled(Link)`\n  && {\n    color: black;\n    text-decoration: none;\n  }\n`;\n\nconst TrackName = styled(T)`\n  && {\n    font-size: 1rem;\n    color: ${colors.success};\n  }\n`;\nconst TrackCollectionName = styled(T)`\n  && {\n    font-size: smaller;\n  }\n`;\nconst TrackPrice = styled(T)`\n  && {\n    color: ${colors.error};\n    margin: 0.4rem 0;\n  }\n`;\nexport const TrackGenre = styled(Badge)`\n  && {\n    font-weight: bold;\n    font-size: smaller;\n  }\n`;\n\nconst StyledAudio = styled.audio`\n  visibility: hidden;\n`;\n\nexport const TOGGLE_PLAY_BTN_TEST_ID = 'play-pause-btn';\n\nfunction TrackCard({\n  trackId,\n  trackName,\n  collectionName,\n  artworkUrl100,\n  trackPrice,\n  primaryGenreName,\n  previewUrl,\n  onTrackToggle\n}) {\n  /** @type {MutableRefObject<HTMLAudioElement>} */\n  const audioRef = useRef(null);\n  const [playing, setPlaying] = useState(false);\n\n  const togglePlay = () => setPlaying((p) => !p);\n\n  function onPause() {\n    // if (playing) {\n    togglePlay();\n    if (audioRef.current.ended) {\n      onTrackToggle(audioRef);\n    }\n    // }\n  }\n\n  function onPlayPause() {\n    if (!playing) {\n      audioRef?.current?.play();\n      togglePlay();\n    } else {\n      audioRef?.current?.pause();\n    }\n    onTrackToggle(audioRef);\n  }\n\n  return (\n    <StyledTrackItem id={trackId} data-testid=\"track-card\">\n      <StyledTrackCard>\n        <StyledImageContainer>\n          <StyledImage\n            width=\"100%\"\n            height=\"100%\"\n            animate={playing ? 'true' : 'false'}\n            data-testid=\"track-image\"\n            preview={false}\n            src={artworkUrl100 ?? ''}\n            fallback=\"https://media.istockphoto.com/vectors/thumbnail-image-vector-graphic-vector-id1147544807?k=20&m=1147544807&s=612x612&w=0&h=pBhz1dkwsCMq37Udtp9sfxbjaMl27JUapoyYpQm0anc=\"\n          />\n          <If condition={!isEmpty(previewUrl)}>\n            <PlayPauseButton\n              title=\"Preview\"\n              data-testid={TOGGLE_PLAY_BTN_TEST_ID}\n              type=\"primary\"\n              onClick={onPlayPause}\n              shape=\"circle\"\n              icon={playing ? <PauseCircleFilled /> : <PlayCircleFilled />}\n            />\n            <StyledAudio\n              data-testid=\"audio-track\"\n              id={trackId}\n              preload=\"none\"\n              src={previewUrl}\n              ref={audioRef}\n              onPause={onPause}\n            ></StyledAudio>\n          </If>\n        </StyledImageContainer>\n        <StyledLink to={`/tracks/${trackId}`}>\n          <TrackInfoContainer>\n            <If\n              condition={!isEmpty(trackName)}\n              otherwise={<TrackName data-testid=\"track_name_unavailable\" id=\"track_name_unavailable\" />}\n            >\n              <TrackName\n                title={trackName}\n                noOfLines={2}\n                data-testid=\"track-name\"\n                marginBottom={10}\n                type=\"subheading\"\n                text={trackName}\n              />\n            </If>\n            <If\n              condition={!isEmpty(collectionName)}\n              otherwise={\n                <TrackCollectionName data-testid=\"collection_name_unavailable\" id=\"collection_name_unavailable\" />\n              }\n            >\n              <TrackCollectionName\n                title={collectionName}\n                noOfLines={3}\n                data-testid=\"collection-name\"\n                type=\"subText\"\n                text={collectionName}\n              />\n            </If>\n            <If\n              condition={typeof trackPrice === 'number'}\n              otherwise={<TrackPrice data-testid=\"track_price_unavailable\" id=\"track_price_unavailable\" />}\n            >\n              <TrackPrice data-testid=\"track-price\" text={`${String(trackPrice)} $`} />\n            </If>\n            <If\n              condition={!isEmpty(primaryGenreName)}\n              otherwise={<T data-testid=\"track_genre_unavailable\" id=\"track_genre_unavailable\" />}\n            >\n              <TrackGenre status=\"success\" data-testid=\"track-genre\" text={primaryGenreName} />\n            </If>\n          </TrackInfoContainer>\n        </StyledLink>\n      </StyledTrackCard>\n    </StyledTrackItem>\n  );\n}\n\nTrackCard.defaultProps = {\n  onTrackToggle: () => {}\n};\nTrackCard.propTypes = {\n  onTrackToggle: PropTypes.func,\n  trackId: PropTypes.number,\n  collectionName: PropTypes.string,\n  trackName: PropTypes.string,\n  artworkUrl100: PropTypes.string,\n  trackPrice: PropTypes.number,\n  releaseDate: PropTypes.string,\n  primaryGenreName: PropTypes.string,\n  previewUrl: PropTypes.string\n};\n\nexport default TrackCard;\n","/**\n *\n * TrackGridContainer\n *\n */\n\nimport For from '@app/components/For';\nimport If from '@app/components/If';\nimport { T } from '@app/components/T';\nimport TrackCard from '@app/components/TrackCard';\nimport { Card, Input, notification, Skeleton } from 'antd';\nimport { debounce, isEmpty } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { memo, useRef, useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { injectSaga } from 'redux-injectors';\nimport { createStructuredSelector } from 'reselect';\nimport styled from 'styled-components';\nimport { trackProviderCreators } from '../TrackProvider/reducer';\nimport trackProviderSaga from '../TrackProvider/saga';\nimport { selectArtist, selectTrackCount, selectTracks, selectTracksError } from '../TrackProvider/selectors';\n\nconst { Search } = Input;\n\nconst CustomCard = styled(Card)`\n  && {\n    user-select: none;\n    ${(props) => props.margintop && `margin-top: ${props.margintop}rem`}\n  }\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: 2rem auto;\n  max-width: ${(props) => props.maxWidth}px;\n  padding: ${(props) => props.padding}rem;\n`;\n\nconst StyledLink = styled(Link)`\n  && {\n    text-align: center;\n  }\n`;\n\nconst StyledArtistSearch = styled(Search)`\n  && {\n    max-width: 18.75rem;\n    border-radius: 0.3rem;\n    padding: 0.5rem;\n  }\n`;\n\nconst StyledHeader = styled.header`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const StyledTracksContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 1rem;\n\n  @media screen and (min-width: 790px) {\n    grid-template-columns: 1fr 1fr;\n  }\n\n  @media screen and (min-width: 1000px) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n`;\n\nconst { requestGetTracks, clearTracks } = trackProviderCreators;\n\nexport const CORS_ERROR_MESSAGE = 'iTunes API CORS issue';\n\nexport function TrackGridContainer({\n  artist,\n  tracks,\n  trackCount,\n  tracksError,\n  dispatchGetTracks,\n  maxWidth,\n  padding,\n  dispatchClearTracks\n}) {\n  const [loading, setLoading] = useState(false);\n  const currentTrackRef = useRef(null);\n\n  function onTrackToggle(trackRef) {\n    if (currentTrackRef?.current !== trackRef.current && !currentTrackRef?.current?.paused) {\n      currentTrackRef?.current?.pause();\n      currentTrackRef.current = trackRef?.current;\n    } else {\n      currentTrackRef.current = null;\n    }\n  }\n\n  useEffect(() => {\n    if (!isEmpty(artist) && isEmpty(tracks)) {\n      dispatchGetTracks(artist);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (loading && !isEmpty(tracks)) {\n      setLoading(false);\n    }\n  }, [tracks, tracksError, loading]);\n\n  const onArtistSearch = (artistName) => {\n    if (!artistName) {\n      return dispatchClearTracks();\n    }\n    setLoading(true);\n    dispatchGetTracks(artistName);\n  };\n\n  useEffect(() => {\n    if (tracksError === 'NETWORK_ERROR') {\n      notification.error({\n        message: CORS_ERROR_MESSAGE,\n        description: 'Try back after some time',\n        placement: 'bottomRight',\n        duration: 5000,\n        type: 'error'\n      });\n    }\n  }, [tracksError]);\n\n  const handleDebouncedSearch = debounce(onArtistSearch, 500);\n\n  const renderSongsTrack = () => {\n    return (\n      <Skeleton loading={loading} active>\n        <CustomCard margintop={2}>\n          <If condition={!isEmpty(artist)} otherwise={<T id=\"songs_data_empty\" />}>\n            <If condition={!isEmpty(artist)} otherwise={<T id=\"itunes_artist_unavailable\" />}>\n              <div>\n                <T data-testid=\"tunes-artist\" id=\"itunes_artist_name\" values={{ artistName: artist }} />\n              </div>\n              <If condition={trackCount} otherwise={<T data-testid=\"empty-track-text\" id=\"itunes_empty_track\" />}>\n                <div>\n                  <T id=\"itunes_track_count\" values={{ trackCount }} />\n                </div>\n              </If>\n            </If>\n          </If>\n        </CustomCard>\n        <If condition={!isEmpty(tracks) && typeof tracks === 'object'}>\n          <CustomCard margintop={1}>\n            <For\n              ParentComponent={StyledTracksContainer}\n              of={Object.values(tracks || {})}\n              renderItem={(item) => (\n                <TrackCard key={item.trackId} skeletonLoading={loading} onTrackToggle={onTrackToggle} {...item} />\n              )}\n            />\n          </CustomCard>\n        </If>\n      </Skeleton>\n    );\n  };\n\n  const renderTunesError = () => {\n    return (\n      <If condition={!isEmpty(tracksError)}>\n        <Card>\n          <If condition={typeof tracksError === 'string'} otherwise={<div>{JSON.stringify(tracksError, null, 2)}</div>}>\n            <T data-testid=\"tunes-error\" text={tracksError} />\n          </If>\n        </Card>\n      </If>\n    );\n  };\n\n  return (\n    <Container maxWidth={maxWidth} padding={padding}>\n      <Helmet>\n        <title>{artist ? `Tracks from ${artist}` : 'TrackGridContainer'}</title>\n        <meta name=\"description\" content=\"Description of TrackGridContainer\" />\n      </Helmet>\n      <StyledLink data-testid=\"repos-redirect\" to=\"/repos\">\n        Goto GitHub Repos\n      </StyledLink>\n      <StyledHeader>\n        <T type=\"heading\" marginBottom={10} id=\"itunes_header\" />\n        <StyledArtistSearch\n          data-testid=\"artist-search-bar\"\n          placeholder=\"input artist name\"\n          allowClear\n          defaultValue={artist}\n          onChange={(evt) => handleDebouncedSearch(evt.target.value)}\n          onSearch={(term) => handleDebouncedSearch(term)}\n        />\n      </StyledHeader>\n      {renderSongsTrack()}\n      {renderTunesError()}\n    </Container>\n  );\n}\n\nTrackGridContainer.propTypes = {\n  artist: PropTypes.string,\n  tracks: PropTypes.object,\n  trackCount: PropTypes.number,\n  tracksError: PropTypes.string,\n  dispatchGetTracks: PropTypes.func,\n  dispatchClearTracks: PropTypes.func,\n  maxWidth: PropTypes.number,\n  padding: PropTypes.number\n};\n\nTrackGridContainer.defaultProps = {\n  maxWidth: 1000,\n  padding: 2,\n  dispatchGetTracks: () => {}\n};\n\nconst mapStateToProps = createStructuredSelector({\n  artist: selectArtist(),\n  tracks: selectTracks(),\n  trackCount: selectTrackCount(),\n  tracksError: selectTracksError()\n});\n\nexport function mapDispatchToProps(dispatch) {\n  return {\n    dispatchGetTracks: (artistName) => dispatch(requestGetTracks(artistName)),\n    dispatchClearTracks: () => dispatch(clearTracks())\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(\n  withConnect,\n  memo,\n  injectIntl,\n  injectSaga({ key: 'trackProvider', saga: trackProviderSaga })\n)(TrackGridContainer);\n\nexport const TrackGridContainerTest = compose(injectIntl)(TrackGridContainer);\n","import { generateApiClient } from '@utils/apiUtils';\nexport const tunesApi = generateApiClient('itunes');\n\nexport const getTunes = (artistName) => tunesApi.get(`search?term=${artistName}`);\n","import { getTunes } from '@app/services/tunesApi';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { trackProviderCreators, trackProviderTypes } from './reducer';\nimport { selectCurrentTrackFromTracks } from './selectors';\n\nconst { successGetTracks, failureGetTracks, successGetTrack, failureGetTrack } = trackProviderCreators;\n\nexport function* getArtistTracks(action) {\n  const response = yield call(getTunes, action.artistName);\n  const { ok, data, problem } = response;\n  if (ok && data) {\n    yield put(successGetTracks(data));\n  } else {\n    yield put(failureGetTracks(data ?? problem));\n  }\n}\n\nexport const CURRENT_TRACK_FROM_TRACKS_SELECTOR = selectCurrentTrackFromTracks();\n\nexport function* getCurrentTrack(action) {\n  const trackFromTrackList = yield select(CURRENT_TRACK_FROM_TRACKS_SELECTOR);\n  if (!trackFromTrackList) {\n    const res = yield call(getTunes, action.trackId);\n    const { ok, data, problem } = res;\n    if (ok && data && data?.results) {\n      yield put(successGetTrack(data.results[0]));\n    } else {\n      yield put(failureGetTrack(data ?? problem));\n    }\n  } else {\n    yield put(successGetTrack(trackFromTrackList));\n  }\n}\n\nexport default function* trackProviderSaga() {\n  yield takeLatest(trackProviderTypes.REQUEST_GET_TRACK, getCurrentTrack);\n  yield takeLatest(trackProviderTypes.REQUEST_GET_TRACKS, getArtistTracks);\n}\n","import { get } from 'lodash';\nimport { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\n/**\n * Direct selector to the trackProvider state domain\n */\n\nconst selectTrackProviderDomain = (state) => state.trackProvider || initialState;\n\nconst selectArtist = () => createSelector(selectTrackProviderDomain, (substate) => substate.list.artistName);\n\nconst selectTracks = () => createSelector(selectTrackProviderDomain, (substate) => substate.list.tracks);\n\nconst selectTrackCount = () => createSelector(selectTrackProviderDomain, (substate) => substate.list.trackCount);\n\nconst selectTracksError = () => createSelector(selectTrackProviderDomain, (substate) => substate.list.error);\n\nconst selectTrackId = () => createSelector(selectTrackProviderDomain, (substate) => substate.details.trackId);\n\nconst selectTrack = () => createSelector(selectTrackProviderDomain, (substate) => substate.details.track);\n\nconst selectTrackError = () => createSelector(selectTrackProviderDomain, (substate) => substate.details.error);\n\nconst selectCurrentTrackFromTracks = () => {\n  const tracksSelector = selectTracks();\n  const trackIdSelector = selectTrackId();\n  return createSelector(tracksSelector, trackIdSelector, (trackList, trackId) => get(trackList, trackId));\n};\n\nexport {\n  selectTrackProviderDomain,\n  selectArtist,\n  selectTracks,\n  selectTrackCount,\n  selectTracksError,\n  selectTrackId,\n  selectTrack,\n  selectTrackError,\n  selectCurrentTrackFromTracks\n};\n"],"sourceRoot":""}