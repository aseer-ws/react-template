{"version":3,"sources":["webpack://react-template/./app/containers/TunesContainer/selectors.js","webpack://react-template/./app/services/tunesApi.js","webpack://react-template/./app/containers/TunesContainer/saga.js","webpack://react-template/./app/components/TrackCard/index.js","webpack://react-template/./app/containers/TunesContainer/index.js"],"names":["selectTunesContainerDomain","state","tunesContainer","initialState","tunesApi","generateApiClient","getTunes","artistName","get","getArtistSongs","tunesContainerSaga","successGetSongs","tunesContainerCreators","failureGetSongs","action","call","response","ok","data","problem","put","takeLatest","tunesContainerTypes","StyledTrackItem","styled","StyledTrackCard","StyledImage","TrackName","T","colors","success","TrackCollectionName","TrackPrice","error","TrackGenre","skeletonLoading","trackName","collectionName","artworkUrl100","trackPrice","primaryGenreName","loading","active","data-testid","hoverable","gutter","span","preview","src","fallback","If","condition","otherwise","id","marginBottom","type","text","String","Search","CustomCard","props","margintop","Container","maxWidth","padding","StyledLink","Link","StyledArtistSearch","StyledHeader","StyledTracksContainer","requestGetSongs","clearSongs","TunesContainer","artist","songsData","tunesError","dispatchGetArtistSongs","dispatchClearSongs","useState","setLoading","useEffect","tracks","trackCount","handleDebouncedSearch","Helmet","name","content","to","placeholder","allowClear","defaultValue","onChange","evt","target","value","onSearch","term","values","length","For","ParentComponent","of","renderItem","item","key","trackId","JSON","stringify","defaultProps","mapStateToProps","createStructuredSelector","createSelector","substate","mapDispatchToProps","dispatch","withConnect","connect","compose","memo","injectIntl","injectSaga","saga","TunesContainerTest"],"mappings":"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","file":"423.6fd71be49dd788041e09.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\nimport get from 'lodash/get';\n\n/**\n * Direct selector to the tunesContainer state domain\n */\n\nconst selectTunesContainerDomain = (state) => state.tunesContainer || initialState;\n\nexport const selectTunesSongs = () => createSelector(selectTunesContainerDomain, (substate) => get(substate, 'songs'));\nexport const selectTunesError = () =>\n  createSelector(selectTunesContainerDomain, (substate) => get(substate, 'tunesError'));\nexport const selectTunesArtist = () =>\n  createSelector(selectTunesContainerDomain, (substate) => get(substate, 'artistName'));\n\nexport { selectTunesContainerDomain };\n","import { generateApiClient } from '@utils/apiUtils';\nexport const tunesApi = generateApiClient('itunes');\n\nexport const getTunes = (artistName) => tunesApi.get(`search?term=${artistName}`);\n","import { getTunes } from '@app/services/tunesApi';\nimport { takeLatest, call, put } from 'redux-saga/effects';\nimport { tunesContainerTypes, tunesContainerCreators } from './reducer';\n\nconst { successGetSongs, failureGetSongs } = tunesContainerCreators;\n\nexport function* getArtistSongs(action) {\n  const response = yield call(getTunes, action.artistName);\n  const { ok, data, problem } = response;\n  if (ok && data) {\n    yield put(successGetSongs(data));\n  } else {\n    yield put(failureGetSongs(data ?? problem));\n  }\n}\n\nexport default function* tunesContainerSaga() {\n  yield takeLatest(tunesContainerTypes.REQUEST_GET_SONGS, getArtistSongs);\n}\n","import React from 'react';\nimport { Card, Col, Image, Row, Skeleton } from 'antd';\nimport { isEmpty } from 'lodash';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport If from '../If';\nimport { T } from '../T';\nimport * as colors from '@app/themes/colors';\n\nconst StyledTrackItem = styled(Col)`\n  && {\n    height: 100%;\n    max-height: 15rem;\n  }\n`;\n\nconst StyledTrackCard = styled(Card)`\n  && {\n    height: 100%;\n  }\n`;\n\nconst StyledImage = styled(Image)`\n  && {\n    width: 6.25rem;\n    height: 6.25rem;\n    border-radius: 50%;\n\n    @media screen and (max-width: 25rem) {\n      width: 5rem;\n      height: 5rem;\n    }\n  }\n`;\n\nconst TrackName = styled(T)`\n  && {\n    font-size: 1rem;\n    color: ${colors.success};\n  }\n`;\nconst TrackCollectionName = styled(T)``;\nconst TrackPrice = styled(T)`\n  && {\n    color: ${colors.error};\n  }\n`;\nconst TrackGenre = styled(T)``;\n\nfunction TrackCard({ skeletonLoading, trackName, collectionName, artworkUrl100, trackPrice, primaryGenreName }) {\n  return (\n    <Skeleton loading={skeletonLoading} active>\n      <StyledTrackItem data-testid=\"track-card\">\n        <StyledTrackCard hoverable>\n          <Row gutter={48}>\n            <Col span={8}>\n              <StyledImage\n                preview={false}\n                src={artworkUrl100}\n                fallback=\"https://media.istockphoto.com/vectors/thumbnail-image-vector-graphic-vector-id1147544807?k=20&m=1147544807&s=612x612&w=0&h=pBhz1dkwsCMq37Udtp9sfxbjaMl27JUapoyYpQm0anc=\"\n              />\n            </Col>\n            <Col span={16}>\n              <If condition={!isEmpty(trackName)} otherwise={<T id=\"track_name_unavailable\" />}>\n                <TrackName data-testid=\"track-name\" marginBottom={10} type=\"subheading\" text={trackName} />\n              </If>\n              <If condition={!isEmpty(collectionName)} otherwise={<T id=\"collection_name_unavailable\" />}>\n                <TrackCollectionName data-testid=\"collection-name\" type=\"subText\" text={collectionName} />\n              </If>\n              <If condition={typeof trackPrice === 'number'} otherwise={<T id=\"track_price_unavailable\" />}>\n                <TrackPrice data-testid=\"track-price\" text={String(trackPrice)} />\n              </If>\n              <If condition={!isEmpty(primaryGenreName)} otherwise={<T id=\"track_genre_unavailable\" />}>\n                <TrackGenre data-testid=\"track-genre\" text={primaryGenreName} />\n              </If>\n            </Col>\n          </Row>\n        </StyledTrackCard>\n      </StyledTrackItem>\n    </Skeleton>\n  );\n}\n\nTrackCard.propTypes = {\n  skeletonLoading: PropTypes.bool,\n  trackId: PropTypes.number,\n  collectionName: PropTypes.string,\n  trackName: PropTypes.string,\n  artworkUrl100: PropTypes.string,\n  trackPrice: PropTypes.number,\n  releaseDate: PropTypes.string,\n  primaryGenreName: PropTypes.string\n};\n\nexport default TrackCard;\n","/**\n *\n * TunesContainer\n *\n */\n\nimport React, { memo, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Helmet } from 'react-helmet';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport { injectSaga } from 'redux-injectors';\nimport { selectTunesArtist, selectTunesError, selectTunesSongs } from './selectors';\nimport tunesContainerSaga from './saga';\nimport { tunesContainerCreators } from './reducer';\nimport { Card, Input, Skeleton } from 'antd';\nimport { debounce, get, isEmpty } from 'lodash';\nimport For from '@app/components/For';\nimport styled from 'styled-components';\nimport TrackCard from '@app/components/TrackCard';\nimport If from '@app/components/If';\nimport { T } from '@app/components/T';\nimport { Link } from 'react-router-dom';\n\nconst { Search } = Input;\n\nconst CustomCard = styled(Card)`\n  && {\n    user-select: none;\n    ${(props) => props.margintop && `margin-top: ${props.margintop}rem`}\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: 2rem auto;\n  max-width: ${(props) => props.maxWidth};\n  padding: ${(props) => props.padding};\n`;\n\nconst StyledLink = styled(Link)`\n  && {\n    text-align: center;\n  }\n`;\n\nconst StyledArtistSearch = styled(Search)`\n  && {\n    max-width: 18.75rem;\n    border-radius: 0.3rem;\n    padding: 0.5rem;\n  }\n`;\n\nconst StyledHeader = styled.header`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst StyledTracksContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1rem;\n`;\n\nconst { requestGetSongs, clearSongs } = tunesContainerCreators;\n\nexport function TunesContainer({\n  artist,\n  songsData,\n  tunesError,\n  dispatchGetArtistSongs,\n  maxWidth,\n  padding,\n  dispatchClearSongs\n}) {\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (loading && !isEmpty(songsData)) {\n      setLoading(false);\n    }\n  }, [songsData]);\n\n  const onArtistSearch = (artistName) => {\n    if (!artistName) {\n      return dispatchClearSongs();\n    }\n    setLoading(true);\n    dispatchGetArtistSongs(artistName);\n  };\n\n  const handleDebouncedSearch = debounce(onArtistSearch, 500);\n\n  const renderSongsTrack = () => {\n    const tracks = get(songsData, 'results', []);\n    const trackCount = get(songsData, 'resultCount', 0);\n\n    return (\n      <Skeleton loading={loading} active>\n        <CustomCard margintop={2}>\n          <If condition={!isEmpty(artist)} otherwise={<T id=\"songs_data_empty\" />}>\n            <If condition={!isEmpty(artist)} otherwise={<T id=\"itunes_artist_unavailable\" />}>\n              <div>\n                <T data-testid=\"tunes-artist\" id=\"itunes_artist_name\" values={{ artistName: artist }} />\n              </div>\n              <If condition={trackCount} otherwise={<T data-testid=\"empty-track-text\" id=\"itunes_empty_track\" />}>\n                <div>\n                  <T id=\"itunes_track_count\" values={{ trackCount: tracks.length }} />\n                </div>\n              </If>\n            </If>\n          </If>\n        </CustomCard>\n        <If condition={loading || !isEmpty(songsData)}>\n          <CustomCard margintop={1}>\n            <For\n              ParentComponent={StyledTracksContainer}\n              of={tracks}\n              renderItem={(item) => <TrackCard key={item.trackId} skeletonLoading={loading} {...item} />}\n            />\n          </CustomCard>\n        </If>\n      </Skeleton>\n    );\n  };\n\n  const renderTunesError = () => {\n    return (\n      <If condition={!isEmpty(tunesError)}>\n        <If condition={typeof tunesError === 'string'} otherwise={<div>{JSON.stringify(tunesError, null, 2)}</div>}>\n          <T data-testid=\"tunes-error\" text={tunesError} />\n        </If>\n      </If>\n    );\n  };\n\n  return (\n    <Container maxWidth={maxWidth} padding={padding}>\n      <Helmet>\n        <title>TunesContainer</title>\n        <meta name=\"description\" content=\"Description of TunesContainer\" />\n      </Helmet>\n      <StyledLink data-testid=\"repos-redirect\" to=\"/repos\">\n        Goto GitHub Repos\n      </StyledLink>\n      <StyledHeader>\n        <T type=\"heading\" marginBottom={10} id=\"itunes_header\" />\n        <StyledArtistSearch\n          data-testid=\"artist-search-bar\"\n          placeholder=\"input artist name\"\n          allowClear\n          defaultValue={artist}\n          onChange={(evt) => handleDebouncedSearch(evt.target.value)}\n          onSearch={(term) => handleDebouncedSearch(term)}\n        />\n      </StyledHeader>\n      {renderSongsTrack()}\n      {renderTunesError()}\n    </Container>\n  );\n}\n\nTunesContainer.propTypes = {\n  tunesContainerSaga: PropTypes.func,\n  artist: PropTypes.string,\n  songsData: PropTypes.shape({\n    resultCount: PropTypes.number,\n    results: PropTypes.array\n  }),\n  tunesError: PropTypes.string,\n  dispatchGetArtistSongs: PropTypes.func,\n  dispatchClearSongs: PropTypes.func,\n  maxWidth: PropTypes.number,\n  padding: PropTypes.string\n};\n\nTunesContainer.defaultProps = {\n  maxWidth: 1000,\n  padding: '2rem'\n};\n\nconst mapStateToProps = createStructuredSelector({\n  artist: selectTunesArtist(),\n  songsData: selectTunesSongs(),\n  tunesError: selectTunesError()\n});\n\nexport function mapDispatchToProps(dispatch) {\n  return {\n    dispatchGetArtistSongs: (artistName) => dispatch(requestGetSongs(artistName)),\n    dispatchClearSongs: () => dispatch(clearSongs())\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(\n  withConnect,\n  memo,\n  injectIntl,\n  injectSaga({ key: 'tunesContainer', saga: tunesContainerSaga })\n)(TunesContainer);\n\nexport const TunesContainerTest = compose(injectIntl)(TunesContainer);\n"],"sourceRoot":""}