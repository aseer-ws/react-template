{"version":3,"sources":["webpack://react-template/./app/components/RepoCard/index.js","webpack://react-template/./app/containers/HomeContainer/selectors.js","webpack://react-template/./app/services/repoApi.js","webpack://react-template/./app/containers/HomeContainer/saga.js","webpack://react-template/./app/containers/HomeContainer/index.js"],"names":["CustomCard","styled","name","fullName","stargazersCount","data-testid","If","condition","otherwise","T","id","values","stars","selectHomeContainerDomain","state","homeContainer","initialState","selectHomeContainer","createSelector","substate","repoApi","generateApiClient","getRepos","repoName","get","getGithubRepos","homeContainerSaga","REQUEST_GET_GITHUB_REPOS","homeContainerTypes","successGetGithubRepos","homeContainerCreators","failureGetGithubRepos","action","call","response","data","ok","put","takeLatest","Search","props","maxwidth","color","Container","padding","RightContent","StyledT","colors","HomeContainer","dispatchGithubRepos","dispatchClearGithubRepos","intl","reposData","reposError","useState","loading","setLoading","useEffect","items","length","repoError","totalCount","debouncedHandleOnChange","debounce","rName","isEmpty","Link","to","title","formatMessage","marginBottom","defaultValue","type","onChange","evt","target","value","onSearch","searchText","active","For","of","ParentComponent","renderItem","item","index","key","text","defaultProps","mapStateToProps","createStructuredSelector","mapDispatchToProps","dispatch","requestGetGithubRepos","clearGithubRepos","withConnect","connect","compose","injectIntl","memo","injectSaga","saga","HomeContainerTest"],"mappings":"y5BAcA,IAAMA,GAAaC,QAAO,KAAV,0EAAGA,CAAH,wBA+BhB,QAzBO,YAAuD,IAAnCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,gBACzC,OACE,EAACJ,EAAD,CAAYK,cAAY,kBAAxB,EACE,EAACC,EAAA,EAAD,CAAIC,WAAY,IAAQL,GAAOM,UAAS,MAAE,EAACC,EAAA,EAAD,CAAGJ,cAAY,mBAAmBK,GAAG,iCAA/E,EACE,EAACD,EAAA,EAAD,CAAGJ,cAAY,OAAOK,GAAG,kBAAkBC,OAAQ,CAAET,KAAMA,MAE7D,EAACI,EAAA,EAAD,CACEC,WAAY,IAAQJ,GACpBK,UAAS,MAAE,EAACC,EAAA,EAAD,CAAGJ,cAAY,uBAAuBK,GAAG,sCAFtD,EAIE,EAACD,EAAA,EAAD,CAAGJ,cAAY,WAAWK,GAAG,uBAAuBC,OAAQ,CAAER,SAAUA,MAE1E,EAACG,EAAA,EAAD,CAAIC,UAAWH,EAAiBI,UAAS,MAAE,EAACC,EAAA,EAAD,CAAGJ,cAAY,wBAAwBK,GAAG,kCAArF,EACE,EAACD,EAAA,EAAD,CAAGJ,cAAY,aAAaK,GAAG,mBAAmBC,OAAQ,CAAEC,MAAOR,Q,eCzB9DS,EAA4B,SAACC,GAAD,OAAWA,EAAMC,eAAiBC,MAU9DC,EAAsB,kBAAMC,QAAeL,GAA2B,SAACM,GAAD,OAAcA,M,eCjB3FC,GAAUC,E,SAAAA,IAAkB,UAErBC,EAAW,SAACC,GAAD,OAAcH,EAAQI,IAAR,iCAAsCD,K,0BCG3DE,G,0BAUQC,GAZjBC,EAA6BC,8BAC7BC,EAAiDC,2BAA1BC,EAA0BD,2BAClD,SAAUL,EAAeO,GAAzB,wFACY,OADZ,UACkBC,UAAKX,EAAUU,EAAOT,UADxC,UACCW,EADD,OAEGC,EAAaD,EAAbC,MAAaD,EAAPE,GAFT,gBAIH,OAJG,UAIGC,SAAIR,EAAsBM,IAJ7B,8BAMH,OANG,WAMGE,SAAIN,EAAsBI,IAN7B,wCAUQ,SAAUT,IAAV,gFACb,OADa,UACPY,gBAAWX,EAA0BF,GAD9B,uC,omDCMf,IAAQc,EAAR,WAEMvC,GAAaC,QAAO,KAAV,4EAAGA,CAAH,oDAGC,SAACuC,GAAD,OAAWA,EAAMC,YACrB,SAACD,GAAD,OAAWA,EAAME,SACxB,SAACF,GAAD,OAAWA,EAAME,OAAN,iBAAyBF,EAAME,UAG1CC,GAAY1C,oBAAH,gEAAGA,CAAH,oGAIE,SAACuC,GAAD,OAAWA,EAAMC,YAGnB,SAACD,GAAD,OAAWA,EAAMI,WAG1BC,GAAe5C,oBAAH,mEAAGA,CAAH,uCAKZ6C,IAAU7C,QAAOQ,KAAV,yEAAGR,CAAH,mBAEA8C,iBAGN,SAASC,GAAT,GASJ,MARDC,EAQC,EARDA,oBACAC,EAOC,EAPDA,yBACAC,EAMC,EANDA,KACAC,EAKC,EALDA,UACAC,EAIC,EAJDA,WACA9B,EAGC,EAHDA,SACAkB,EAEC,EAFDA,SACAG,EACC,EADDA,QAEA,KAA8BU,eAAS,GAAvC,GAAOC,EAAP,KAAgBC,EAAhB,MAEAC,gBAAU,YACOjC,IAAI4B,EAAW,QAAS,OAASC,IAE9CG,GAAW,KAEZ,CAACJ,KAEJK,gBAAU,WAAM,OACVlC,GAAY,OAAC6B,QAAD,IAACA,GAAD,UAACA,EAAWM,aAAZ,OAAC,EAAkBC,SACjCV,EAAoB1B,GACpBiC,GAAW,MAEZ,IAEH,IAsCMI,EA3BEF,EACAG,EAJFC,EAA0BC,KART,SAACC,GACjBC,IAAQD,GAIXd,KAHAD,EAAoBe,GACpBR,GAAW,MAK0C,KAgDzD,OACE,EAACb,GAAD,CAAWF,SAAUA,EAAUG,QAASA,QAAxC,QACE,EAACC,GAAD,UACE,EAAC,EAAAqB,KAAD,CAAM7D,cAAY,WAAW8D,GAAG,iBAAhC,EACE,EAACrB,GAAD,CAASpC,GAAG,eAGhB,EAAC,EAAD,CAAY0D,MAAOjB,EAAKkB,cAAc,CAAE3D,GAAI,gBAAkB+B,SAAUA,QAAxE,QACE,EAAChC,EAAA,EAAD,CAAG6D,aAAc,GAAI5D,GAAG,sBACxB,EAAC6B,EAAD,CACElC,cAAY,aACZkE,aAAchD,EACdiD,KAAK,OACLC,SAAU,SAACC,GAAD,OAASZ,EAAwBY,EAAIC,OAAOC,QACtDC,SAAU,SAACC,GAAD,OAAgBhB,EAAwBgB,QA3DlDpB,EAAQlC,IAAI4B,EAAW,QAAS,IAChCS,EAAarC,IAAI4B,EAAW,aAAc,GAE9C,EAAC9C,EAAA,EAAD,CAAIC,WAAY0D,IAAQP,IAAUH,QAAlC,EACE,EAAC,EAAD,UACE,aAAUA,QAASA,EAASwB,QAAM,QAAlC,EACE,EAACzE,EAAA,EAAD,CAAIC,WAAY0D,IAAQ1C,SAAxB,EACE,kBACE,EAACd,EAAA,EAAD,CAAGC,GAAG,eAAeC,OAAQ,CAAEY,gBAGnC,EAACjB,EAAA,EAAD,CAAIC,UAA0B,IAAfsD,QAAf,EACE,kBACE,EAACpD,EAAA,EAAD,CAAGC,GAAG,iBAAiBC,OAAQ,CAAEkD,kBAGrC,EAACmB,EAAA,EAAD,CACEC,GAAIvB,EACJwB,gBAAiBvC,GACjBwC,WAAY,SAACC,EAAMC,GAAP,OAAiB,gBAAC,EAAD,GAAUC,IAAKD,GAAWD,YAS7D/B,EACFO,EAAYP,EACHY,IAAQ1C,KACjBqC,EAAY,wBAGXL,GACDK,GACE,EAAC,EAAD,CAAYlB,MAAOW,EAAa,MAAQ,OAAQe,MAAOjB,EAAKkB,cAAc,CAAE3D,GAAI,oBAAhF,EACE,EAACJ,EAAA,EAAD,CAAIC,UAAW8C,EAAY7C,UAAW,EAACC,EAAA,EAAD,CAAGJ,cAAY,kBAAkBK,GAAIkD,UAA3E,QACE,EAACnD,EAAA,EAAD,CAAGJ,cAAY,gBAAgBkF,KAAMlC,SA8CjDL,GAAcwC,aAAe,CAC3B/C,SAAU,IACVG,QAAS,GACTQ,UAAW,GACXC,WAAY,MAGd,IAAMoC,IAAkBC,QAAyB,CAC/C3E,cAAeE,IACfmC,WHjKAlC,QAAeL,GAA2B,SAACM,GAAD,OAAcK,IAAIL,EAAU,gBGkKtEkC,YH/JAnC,QAAeL,GAA2B,SAACM,GAAD,OAAcK,IAAIL,EAAU,iBGgKtEI,UH9JkCL,QAAeL,GAA2B,SAACM,GAAD,OAAcK,IAAIL,EAAU,iBGiKnG,SAASwE,GAAmBC,GACjC,IAAQC,EAA4C/D,2BAArBgE,EAAqBhE,sBACpD,MAAO,CACLmB,oBAAqB,SAAC1B,GAAD,OAAcqE,EAASC,EAAsBtE,KAClE2B,yBAA0B,kBAAM0C,EAASE,OAI7C,IAAMC,IAAcC,aAAQP,GAAiBE,IAE7C,UAAeM,aACbC,aACAH,GACAI,QACAC,QAAW,CAAEd,IAAK,gBAAiBe,KAAM3E,IAJ3C,CAKEsB,IAEK,IAAMsD,IAAoBL,aAAQC,aAARD,CAAoBjD","file":"180.bf7b2f971af42ef52529.chunk.js","sourcesContent":["/**\n *\n * RepoCard\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Card } from 'antd';\nimport T from '@components/T';\nimport If from '@components/If';\nimport { isEmpty } from 'lodash';\n\nconst CustomCard = styled(Card)`\n  && {\n    margin: 20px 0;\n  }\n`;\n\nexport function RepoCard({ name, fullName, stargazersCount }) {\n  return (\n    <CustomCard data-testid=\"repo-card\">\n      <If condition={!isEmpty(name)} otherwise={<T data-testid=\"name-unavailable\" id=\"repo_name_unavailable\" />}>\n        <T data-testid=\"name\" id=\"repository_name\" values={{ name: name }} />\n      </If>\n      <If\n        condition={!isEmpty(fullName)}\n        otherwise={<T data-testid=\"fullName-unavailable\" id=\"repo_full_name_unavailable\" />}\n      >\n        <T data-testid=\"fullName\" id=\"repository_full_name\" values={{ fullName: fullName }} />\n      </If>\n      <If condition={stargazersCount} otherwise={<T data-testid=\"stargazers-unavaiable\" id=\"repo_stars_unavailable\" />}>\n        <T data-testid=\"stargazers\" id=\"repository_stars\" values={{ stars: stargazersCount }} />\n      </If>\n    </CustomCard>\n  );\n}\n\nRepoCard.propTypes = {\n  name: PropTypes.string,\n  fullName: PropTypes.string,\n  stargazersCount: PropTypes.number\n};\n\nexport default RepoCard;\n","import { createSelector } from 'reselect';\nimport get from 'lodash/get';\nimport { initialState } from './reducer';\n\n/**\n * Direct selector to the homeContainer state domain\n */\n\nexport const selectHomeContainerDomain = (state) => state.homeContainer || initialState;\n\n/**\n * Other specific selectors\n */\n\n/**\n * Default selector used by HomeContainer\n */\n\nexport const selectHomeContainer = () => createSelector(selectHomeContainerDomain, (substate) => substate);\n\nexport const selectReposData = () =>\n  createSelector(selectHomeContainerDomain, (substate) => get(substate, 'reposData'));\n\nexport const selectReposError = () =>\n  createSelector(selectHomeContainerDomain, (substate) => get(substate, 'reposError'));\n\nexport const selectRepoName = () => createSelector(selectHomeContainerDomain, (substate) => get(substate, 'repoName'));\nexport default selectHomeContainer;\n","import { generateApiClient } from '@utils/apiUtils';\nconst repoApi = generateApiClient('github');\n\nexport const getRepos = (repoName) => repoApi.get(`/search/repositories?q=${repoName}`);\n","import { put, call, takeLatest } from 'redux-saga/effects';\nimport { getRepos } from '@services/repoApi';\nimport { homeContainerTypes, homeContainerCreators } from './reducer';\n\nconst { REQUEST_GET_GITHUB_REPOS } = homeContainerTypes;\nconst { successGetGithubRepos, failureGetGithubRepos } = homeContainerCreators;\nexport function* getGithubRepos(action) {\n  const response = yield call(getRepos, action.repoName);\n  const { data, ok } = response;\n  if (ok) {\n    yield put(successGetGithubRepos(data));\n  } else {\n    yield put(failureGetGithubRepos(data));\n  }\n}\n// Individual exports for testing\nexport default function* homeContainerSaga() {\n  yield takeLatest(REQUEST_GET_GITHUB_REPOS, getGithubRepos);\n}\n","import React, { useEffect, memo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport get from 'lodash/get';\nimport debounce from 'lodash/debounce';\nimport isEmpty from 'lodash/isEmpty';\nimport styled from 'styled-components';\nimport { injectIntl } from 'react-intl';\nimport { injectSaga } from 'redux-injectors';\nimport { Card, Skeleton, Input } from 'antd';\nimport T from '@components/T';\nimport If from '@components/If';\nimport For from '@app/components/For';\nimport colors from '@app/themes/colors';\nimport RepoCard from '@app/components/RepoCard';\nimport { selectHomeContainer, selectReposData, selectReposError, selectRepoName } from './selectors';\nimport { homeContainerCreators } from './reducer';\nimport homeContainerSaga from './saga';\nimport { Link } from 'react-router-dom';\n\nconst { Search } = Input;\n\nconst CustomCard = styled(Card)`\n  && {\n    margin: 20px 0;\n    max-width: ${(props) => props.maxwidth};\n    color: ${(props) => props.color};\n    ${(props) => props.color && `color: ${props.color}`};\n  }\n`;\nconst Container = styled.div`\n  && {\n    display: flex;\n    flex-direction: column;\n    max-width: ${(props) => props.maxwidth}px;\n    width: 100%;\n    margin: 0 auto;\n    padding: ${(props) => props.padding}px;\n  }\n`;\nconst RightContent = styled.div`\n  display: flex;\n  align-self: flex-end;\n`;\n\nconst StyledT = styled(T)`\n  && {\n    color: ${colors.gotoStories};\n  }\n`;\nexport function HomeContainer({\n  dispatchGithubRepos,\n  dispatchClearGithubRepos,\n  intl,\n  reposData,\n  reposError,\n  repoName,\n  maxwidth,\n  padding\n}) {\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const loaded = get(reposData, 'items', null) || reposError;\n    if (loaded) {\n      setLoading(false);\n    }\n  }, [reposData]);\n\n  useEffect(() => {\n    if (repoName && !reposData?.items?.length) {\n      dispatchGithubRepos(repoName);\n      setLoading(true);\n    }\n  }, []);\n\n  const handleOnChange = (rName) => {\n    if (!isEmpty(rName)) {\n      dispatchGithubRepos(rName);\n      setLoading(true);\n    } else {\n      dispatchClearGithubRepos();\n    }\n  };\n  const debouncedHandleOnChange = debounce(handleOnChange, 200);\n\n  const renderRepoList = () => {\n    const items = get(reposData, 'items', []);\n    const totalCount = get(reposData, 'totalCount', 0);\n    return (\n      <If condition={!isEmpty(items) || loading}>\n        <CustomCard>\n          <Skeleton loading={loading} active>\n            <If condition={!isEmpty(repoName)}>\n              <div>\n                <T id=\"search_query\" values={{ repoName }} />\n              </div>\n            </If>\n            <If condition={totalCount !== 0}>\n              <div>\n                <T id=\"matching_repos\" values={{ totalCount }} />\n              </div>\n            </If>\n            <For\n              of={items}\n              ParentComponent={Container}\n              renderItem={(item, index) => <RepoCard key={index} {...item} />}\n            />\n          </Skeleton>\n        </CustomCard>\n      </If>\n    );\n  };\n  const renderErrorState = () => {\n    let repoError;\n    if (reposError) {\n      repoError = reposError;\n    } else if (isEmpty(repoName)) {\n      repoError = 'repo_search_default';\n    }\n    return (\n      !loading &&\n      repoError && (\n        <CustomCard color={reposError ? 'red' : 'grey'} title={intl.formatMessage({ id: 'repo_list' })}>\n          <If condition={reposError} otherwise={<T data-testid=\"default-message\" id={repoError} />}>\n            <T data-testid=\"error-message\" text={reposError} />\n          </If>\n        </CustomCard>\n      )\n    );\n  };\n\n  return (\n    <Container maxwidth={maxwidth} padding={padding}>\n      <RightContent>\n        <Link data-testid=\"redirect\" to=\"/stories\">\n          <StyledT id=\"stories\" />\n        </Link>\n      </RightContent>\n      <CustomCard title={intl.formatMessage({ id: 'repo_search' })} maxwidth={maxwidth}>\n        <T marginBottom={10} id=\"get_repo_details\" />\n        <Search\n          data-testid=\"search-bar\"\n          defaultValue={repoName}\n          type=\"text\"\n          onChange={(evt) => debouncedHandleOnChange(evt.target.value)}\n          onSearch={(searchText) => debouncedHandleOnChange(searchText)}\n        />\n      </CustomCard>\n      {renderRepoList()}\n      {renderErrorState()}\n    </Container>\n  );\n}\n\nHomeContainer.propTypes = {\n  dispatchGithubRepos: PropTypes.func,\n  dispatchClearGithubRepos: PropTypes.func,\n  intl: PropTypes.object,\n  reposData: PropTypes.shape({\n    totalCount: PropTypes.number,\n    incompleteResults: PropTypes.bool,\n    items: PropTypes.array\n  }),\n  reposError: PropTypes.string,\n  repoName: PropTypes.string,\n  history: PropTypes.object,\n  maxwidth: PropTypes.number,\n  padding: PropTypes.number\n};\n\nHomeContainer.defaultProps = {\n  maxwidth: 500,\n  padding: 20,\n  reposData: {},\n  reposError: null\n};\n\nconst mapStateToProps = createStructuredSelector({\n  homeContainer: selectHomeContainer(),\n  reposData: selectReposData(),\n  reposError: selectReposError(),\n  repoName: selectRepoName()\n});\n\nexport function mapDispatchToProps(dispatch) {\n  const { requestGetGithubRepos, clearGithubRepos } = homeContainerCreators;\n  return {\n    dispatchGithubRepos: (repoName) => dispatch(requestGetGithubRepos(repoName)),\n    dispatchClearGithubRepos: () => dispatch(clearGithubRepos())\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(\n  injectIntl,\n  withConnect,\n  memo,\n  injectSaga({ key: 'homeContainer', saga: homeContainerSaga })\n)(HomeContainer);\n\nexport const HomeContainerTest = compose(injectIntl)(HomeContainer);\n"],"sourceRoot":""}